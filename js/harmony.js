// Generated by CoffeeScript 1.6.3
(function() {
  this.Harmony = (function() {
    function Harmony() {}

    Harmony.prototype.init = function() {
      this.scene = this.createScene();
      this.initVfx();
      this.disturbances = [];
      return this.controls = new Controls({
        app: this
      });
    };

    Harmony.prototype.initVfx = function() {
      this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 10000);
      this.camera.position.z = 500;
      this.renderer = new THREE.WebGLRenderer();
      this.renderer.setSize(window.innerWidth, window.innerHeight);
      return document.body.appendChild(this.renderer.domElement);
    };

    Harmony.prototype.createScene = function() {
      var scene;
      scene = new THREE.Scene();
      this.grid = new window.Grid({
        dimensions: new THREE.Vector2(28, 10),
        position: new THREE.Vector3(-2600, -900, -1000),
        cell_size: new THREE.Vector3(200, 200, 10),
        materials: [
          new THREE.MeshBasicMaterial({
            color: 0xffbb00
          }), new THREE.MeshBasicMaterial({
            color: 0xcc9900
          }), new THREE.MeshBasicMaterial({
            color: 0xddaa00
          })
        ]
      });
      this.grid.addBoxesToScene(scene);
      return scene;
    };

    Harmony.prototype.update = function() {
      var disturbance, i, _i, _len, _ref, _results;
      if (this.paused) {
        return;
      }
      _ref = this.disturbances;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        disturbance = _ref[i];
        if (disturbance === void 0 || disturbance.done()) {
          if (disturbance) {
            console.log("Disturbance done, removing after " + disturbance.stepCount() + " steps");
          }
          this.disturbances.splice(i, 1);
          if (this.disturbances.length === 0) {
            console.log('No more disturbances left, resetting grid');
            _results.push(this.grid.reset());
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(disturbance.step());
        }
      }
      return _results;
    };

    Harmony.prototype.draw = function() {
      return this.renderer.render(this.scene, this.camera);
    };

    Harmony.prototype.togglePause = function() {
      this.paused = this.paused !== true;
      if (this.paused) {
        return console.log('Paused');
      } else {
        return console.log('Continue');
      }
    };

    return Harmony;

  })();

}).call(this);
